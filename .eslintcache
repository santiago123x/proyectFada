[{"C:\\Users\\Santiago\\Documents\\U\\Semestre4\\Fada\\proyectofada\\src\\index.js":"1","C:\\Users\\Santiago\\Documents\\U\\Semestre4\\Fada\\proyectofada\\src\\App.js":"2","C:\\Users\\Santiago\\Documents\\U\\Semestre4\\Fada\\proyectofada\\src\\Libros.js":"3"},{"size":267,"mtime":1607545109081,"results":"4","hashOfConfig":"5"},{"size":8096,"mtime":1608244617369,"results":"6","hashOfConfig":"5"},{"size":5923,"mtime":1608258463828,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"4buoml",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"C:\\Users\\Santiago\\Documents\\U\\Semestre4\\Fada\\proyectofada\\src\\index.js",[],["17","18"],"C:\\Users\\Santiago\\Documents\\U\\Semestre4\\Fada\\proyectofada\\src\\App.js",["19"],"import './App.css';\nimport React, { useState } from 'react';\nimport { Button, Form, FormGroup, Input,  Label, Table,ButtonGroup } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  let turnos = [\n    { Proc: 'Proc1', HoraI: '0:00', HoraF: '8:30' },\n    { Proc: 'Proc2', HoraI: '5:00', HoraF: '12:00' },\n    { Proc: 'Proc3', HoraI: '11:00', HoraF: '21:30' },\n    { Proc: 'Proc4', HoraI: '12:00', HoraF: '24:00' },\n    { Proc: 'Proc5', HoraI: '22:00', HoraF: '24:00' }\n  ];\n  //const [texto, setTexto] = useState([]);\n  const [turnosEf, setTurnosEf] = useState([]);\n  const [love, setLove] = useState(0);\n  const [horas, setHoras] = useState();\n  const [arreglo, setArreglo] = useState([]);\n  //const [select,setSelect] = useState('');\n  const [nom,setNom] = useState('');\n  const [Hi,setHi] = useState('');\n  const [Hf,setHf] = useState('');\n\n  const[indiceKey, setKey] = useState(0);\n\n\n\n  function ordenar(entrada) {\n\n    if (entrada.length <= 1) {\n      return entrada;\n    }\n    const mitad = Math.floor(entrada.length / 2);\n\n    const izq = entrada.slice(0, mitad);\n    const der = entrada.slice(mitad);\n\n    return merge(\n      ordenar(izq), ordenar(der)\n    );\n\n  }\n\n  function ordenados(entrada) {\n    //setTexto(ordenar(entrada));\n    //console.log(ordenar(entrada));\n    console.log(hospitalVoraz(ordenar(entrada)))\n    return ordenar(entrada)\n  }\n\n\n  function merge(izq,der){\n    let nuevoArray = []\n     \n      while (izq.length && der.length) {\n         \n          if (sacarHora(izq[0].HoraF) < sacarHora(der[0].HoraF)) {\n            nuevoArray.push(izq.shift())  \n          } else if(sacarHora(izq[0].HoraF) > sacarHora(der[0].HoraF)) {\n            nuevoArray.push(der.shift()) \n          }else{\n            if (sacarMinutos(izq[0].HoraF) < sacarMinutos(der[0].HoraF)) {\n              nuevoArray.push(izq.shift())  \n              \n            } else {\n              nuevoArray.push(der.shift()) \n            }\n          }\n      }\n      \n      return [ ...nuevoArray, ...izq, ...der ]\n  }\n\n\n  \n\n  function sacarHora(hora) {\n    let soloH = null;\n    if (hora.length === 5) {\n      soloH = hora.substr(0, 2)\n    } else {\n      soloH = hora.substr(0, 1)\n    }\n    return parseInt(soloH);\n  }\n\n  function sacarMinutos(hora) {\n    let soloM = null;\n    if (hora.length === 5) {\n      soloM = hora.substr(3, 2)\n    } else {\n      soloM = hora.substr(2, 2)\n    }\n    return parseInt(soloM);\n  }\n\n  function hospitalVoraz(entrada) {\n    let TurnosEficientes = [];\n    setTurnosEf([]);\n    let turnoI = entrada[0];\n    TurnosEficientes.push(turnoI);\n\n    for (let i = 1; i < entrada.length; i++) {\n\n      if (sacarHora(turnoI.HoraF) === sacarHora(entrada[i].HoraI)) {\n        if (sacarMinutos(turnoI.HoraF) <= sacarMinutos(entrada[i].HoraI)) {\n          turnoI = entrada[i];\n          TurnosEficientes.push(turnoI);\n        }        \n      }else if (sacarHora(turnoI.HoraF) < sacarHora(entrada[i].HoraI)){\n        turnoI = entrada[i];\n        TurnosEficientes.push(turnoI);\n      }\n    }\n    console.log(TurnosEficientes)\n    setTurnosEf(TurnosEficientes);\n    setHoras(horasTotal(TurnosEficientes));\n  }\n\n  function horasTotal (array){\n    let totalH = 0;\n    let totalM = 0 ;\n    for (let i = 0; i < array.length; i++){\n      let hora = sacarHora(array[i].HoraF) - sacarHora(array[i].HoraI);\n      let min = sacarMinutos(array[i].HoraF) - sacarMinutos(array[i].HoraI);\n      if (min < 0){\n        hora -= 1;\n        min = 30; \n      }\n      totalH += hora;\n      totalM += min;\n      if (totalM === 60){\n        totalH += 1;\n        totalM = 0;\n      }\n    }\n    if(totalH<10){\n      totalH = '0'+totalH;\n    }\n    if(totalM<10){\n      totalM = '0'+totalM;\n    }\n    return `Tiempo de uso de la sala: ${totalH}:${totalM}`\n  }\n\n\n\n  function agregarPro(){\n    let nomP = nom;\n    let hI = Hi;\n    let hF = Hf;\n    \n    let Proc = {key: indiceKey,Proc: nomP,HoraI: hI, HoraF: hF };\n    setKey(indiceKey+1)\n    let arri= [];\n    arri = arreglo;\n\n    arri.push(Proc);\n\n    setArreglo(arri);\n    \n    console.log(arreglo)\n  }\n\n   function borrar(i){\n    var arri = arreglo;\n    arri.splice(i,1);\n   setArreglo(arri);\n    return 0;\n  }\n\n  function refrescar(){\n    setLove(love+1)\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <div className='contene'>\n        <div><h2>Listado de Procedimientos - Hospital - Voraz</h2></div>\n        <div className='formu'>\n        <Form> \n        <FormGroup>\n          <Label for='nomP'>Nombre del Procedimiento: </Label>\n          <Input onChange={e => setNom(e.target.value)}  name='nomP' id='nomP' placeholder='Nombre del Procedimiento' type='text'>\n          </Input>\n        </FormGroup>\n        <FormGroup>\n        <Label for='hI'>Hora Inicial del Procedimiento: </Label>\n          <Input onChange={e => setHi(e.target.value)} name='hI' id='hI' placeholder='Hora Inicial' type='text'>\n          </Input>\n        </FormGroup>\n        <FormGroup>\n        <Label for='hF'>Hora Final del Procedimiento: </Label>\n          <Input onChange={e => setHf(e.target.value)} name='hF' id='hF' placeholder='Hora Final' type='text'>\n          </Input>\n        </FormGroup>\n        \n        </Form>\n        </div>\n        <ButtonGroup className='botones'>\n        <Button className='mb-2 ' color='primary' onClick={() => agregarPro()}><b>Agregar Procedimiento</b></Button>\n        <Button className='btn' color='secondary' onClick={() => refrescar()}><i class=\"fa fa-refresh\" aria-hidden=\"true\"></i></Button>\n        </ButtonGroup>\n      \n      <div className='select'>\n      <Table size=\"sm\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Procedimiento</th>\n                <th>Hora Inicial</th>\n                <th>Hora Final</th>\n                <th>Opci√≥n</th>\n              </tr>\n            </thead>\n            <tbody>\n              {arreglo.map((tur, i) =>\n                <tr>\n                  <th scope=\"row\">{i+1}</th>\n                  <td>{tur.Proc}</td>\n                  <td>{tur.HoraI}</td>\n                  <td>{tur.HoraF}</td>\n                  <td><Button color='danger' onClick={() => borrar(i)}><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></Button></td>\n                </tr>\n              )}\n              \n            </tbody>\n          </Table>\n      </div>\n        <Button className='mb-2' color='primary' onClick={() => hospitalVoraz(ordenados(arreglo))}><b>Ordenar los Turnos</b></Button><br />\n        <div className='conteneTabla'>\n          <h4>{horas}</h4>\n          <Table size=\"sm\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Procedimiento</th>\n                <th>Hora Inicial</th>\n                <th>Hora Final</th>\n              </tr>\n            </thead>\n            <tbody>\n              {turnosEf.map((tur, i) =>\n                <tr>\n                  <th scope=\"row\">{i+1}</th>\n                  <td>{tur.Proc}</td>\n                  <td>{tur.HoraI}</td>\n                  <td>{tur.HoraF}</td>\n                </tr>\n              )}\n              \n            </tbody>\n          </Table>\n        </div>\n      </div>\n    \n\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n  \n    \n  \n  /*\n  function merge(izq, der) {\n    let nuevoArray = [], izqIndex = 0, derIndex = 0;\n\n    while (izqIndex < izq.length && derIndex < der.length) {\n      if (sacarHora(izq[izqIndex].HoraF) < sacarHora(der[izqIndex].HoraF)) {\n        \n        nuevoArray.push(izq[izqIndex]);\n        console.log('<: ');\n        console.log(nuevoArray)\n        izqIndex++;\n      } else if (sacarHora(izq[izqIndex].HoraF) > sacarHora(der[izqIndex].HoraF)) {\n        nuevoArray.push(der[derIndex]);\n        console.log('>: ');\n        console.log(nuevoArray)\n        derIndex++;\n      }\n      else {\n        if (sacarMinutos(izq[izqIndex].HoraF) < sacarMinutos(der[izqIndex].HoraF)) {\n          nuevoArray.push(izq[izqIndex]);\n          izqIndex++;\n        } else {\n          nuevoArray.push(der[derIndex]);\n          derIndex++;\n        }\n      }\n    }\n    \n    return nuevoArray.concat(izq.slice(izqIndex)).concat(der.slice(derIndex));\n  }\n*/","C:\\Users\\Santiago\\Documents\\U\\Semestre4\\Fada\\proyectofada\\src\\Libros.js",["20"],"import './App.css';\r\nimport React, { useState } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, ButtonGroup, Table } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Libros() {\r\n  const [nom, setNom] = useState('');\r\n  const [pag, setPag] = useState('');\r\n  const [esc, setEsc] = useState(0);\r\n  const [love, setLove] = useState(0);\r\n  const [arreglo, setArreglo] = useState([]);\r\n  const [indiceKey, setKey] = useState(0);\r\n\r\n  const [arrayLibros, setArrLib] = useState([]);\r\n\r\n  let libros = [\r\n    { Nombre: 'Libro1', Paginas: 103 },\r\n    { Nombre: 'Libro2', Paginas: 203 },\r\n    { Nombre: 'Libro3', Paginas: 343 },\r\n    { Nombre: 'Libro4', Paginas: 53 },\r\n    { Nombre: 'Libro5', Paginas: 130 },\r\n    { Nombre: 'Libro6', Paginas: 90 }\r\n  ]\r\n\r\n\r\n\r\n  function prom(array, escrit) {\r\n    let totalP = null;\r\n    for (let i = 0; i < array.length; i++) {\r\n      totalP += array[i].Paginas;\r\n    }\r\n    let cadau = totalP / escrit;\r\n    //console.log(cadau)\r\n    return (cadau);\r\n\r\n  }\r\n\r\n  function asignar(escrit, array, cadau) {\r\n    let viejoarray = [];\r\n    viejoarray = array;\r\n    let nuevoarray = [];\r\n    for (let i = 1; i <= escrit; i++) {\r\n      let debeser = 0;\r\n      let arrayx = [];\r\n      if (i < escrit) {\r\n        while (viejoarray.length !== 0 && cadau >= debeser) {\r\n          if (arrayx.length === 0 && viejoarray[0].Paginas > cadau) {\r\n            debeser += viejoarray[0].Paginas;\r\n            let libro = {\r\n              Nombre: viejoarray[0].Nombre, Paginas: viejoarray[0].Paginas\r\n            }\r\n            viejoarray.splice(0, 1);\r\n            arrayx.push(libro);\r\n\r\n          } else if ((debeser + viejoarray[0].Paginas) < (cadau * 1.07)) {\r\n            debeser += viejoarray[0].Paginas;\r\n            let libro = {\r\n              Nombre: viejoarray[0].Nombre, Paginas: viejoarray[0].Paginas\r\n            }\r\n            viejoarray.splice(0, 1);\r\n            arrayx.push(libro);\r\n          }\r\n          else {\r\n            debeser = cadau + 1\r\n          }\r\n        }\r\n\r\n      } else {\r\n        arrayx = viejoarray\r\n      }\r\n      nuevoarray.push(arrayx);\r\n    }\r\n    setArreglo([]);\r\n    setArrLib(nuevoarray);\r\n  }\r\n\r\n  function imprimir() {\r\n    let noe = ''\r\n    noe += maxDias(arrayLibros) + ' Dias ----> '\r\n    for (var j = 0; j < arrayLibros.length; j++) {\r\n      noe += ' [ '\r\n      for (var i = 0; i < arrayLibros[j].length; i++) {\r\n        //noe += `\\nEscritor #:  ${j} Libro: ${arrayLibros[j][i].Nombre} # Paginas: ${arrayLibros[j][i].Paginas}\\n`\r\n        noe += 'Escritor #:  ' + (j+1) + ', Nombre: ' + arrayLibros[j][i].Nombre + ', # Paginas: ' + arrayLibros[j][i].Paginas + ' ------> '\r\n      }\r\n      noe += ' ] '\r\n    }\r\n\r\n    \r\n    return noe;\r\n\r\n  }\r\n\r\n  function refrescar() {\r\n    setLove(love + 1)\r\n  }\r\n\r\n  function maxDias(array) {\r\n    let maxPag = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n      let contador = 0;\r\n\r\n      for (let y = 0; y < array[i].length; y++) {\r\n        contador += array[i][y].Paginas;\r\n        if (contador > maxPag) {\r\n          maxPag = contador;\r\n\r\n        }\r\n      }\r\n    }\r\n    return maxPag;\r\n  }\r\n\r\n  function agregarLib() {\r\n    let nomP = nom;\r\n    let pagi = parseInt(pag);\r\n\r\n\r\n    let Lib = { key: indiceKey, Nombre: nomP, Paginas: pagi };\r\n    setKey(indiceKey + 1)\r\n    let arri = [];\r\n    arri = arreglo;\r\n\r\n    arri.push(Lib);\r\n\r\n    setArreglo(arri);\r\n  }\r\n\r\n  function borrar(i) {\r\n    var arri = arreglo;\r\n    arri.splice(i, 1);\r\n    setArreglo(arri);\r\n    return 0;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='contene'>\r\n        <div><h2>Copia de Libros - Voraz</h2></div>\r\n        <div className='formu'>\r\n          <Form>\r\n            <FormGroup>\r\n              <Label for='nom'>Nombre del Libro: </Label>\r\n              <Input onChange={e => setNom(e.target.value)} name='nom' id='nom' placeholder='Nombre del Libro' type='text'>\r\n              </Input>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for='pag'>Numero de Paginas: </Label>\r\n              <Input onChange={e => setPag(e.target.value)} name='pag' id='pag' placeholder='Numero de Paginas' type='text'>\r\n              </Input>\r\n            </FormGroup>\r\n\r\n\r\n          </Form>\r\n          <ButtonGroup className='botones'>\r\n            <Button className='mb-2 ' color='primary' onClick={() => agregarLib()}><b>Agregar Libro</b></Button>\r\n            <Button className='btn' color='secondary' onClick={() => refrescar()}><i class=\"fa fa-refresh\" aria-hidden=\"true\"></i></Button>\r\n          </ButtonGroup>\r\n        </div>\r\n\r\n        <div className='select'>\r\n          <Table size=\"sm\">\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Nombre del Libro</th>\r\n                <th>Numero de Paginas</th>\r\n                <th>Opci√≥n</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {arreglo.map((tur, i) =>\r\n                <tr>\r\n                  <th scope=\"row\">{i + 1}</th>\r\n                  <td>{tur.Nombre}</td>\r\n                  <td>{tur.Paginas}</td>\r\n                  <td><Button color='danger' onClick={() => borrar(i)}><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></Button></td>\r\n                </tr>\r\n              )}\r\n\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n        <FormGroup style={{ width: '60%' }} >\r\n          <Label for='esc'>Numero de Escritores </Label>\r\n          <Input onChange={e => setEsc(e.target.value)} name='esc' id='esc' placeholder='Numero de Escritores' type='number'>\r\n          </Input>\r\n        </FormGroup>\r\n        <Button style={{ width: '20%' }} className='mb-2' color='primary' onClick={() => asignar(esc, arreglo, prom(arreglo, esc))}><b>Libros</b></Button><br />\r\n\r\n        <div className='conteneTabla'>\r\n          <p><b>{imprimir()}</b></p>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Libros;",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":7,"column":7,"nodeType":"27","messageId":"28","endLine":7,"endColumn":13},{"ruleId":"25","severity":1,"message":"29","line":16,"column":7,"nodeType":"27","messageId":"28","endLine":16,"endColumn":13},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-unused-vars","'turnos' is assigned a value but never used.","Identifier","unusedVar","'libros' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]